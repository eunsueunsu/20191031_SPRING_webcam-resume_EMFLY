<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!-- Appenders -->
	<!-- 
		Appenders : 전달된 로그를 어디에 출력할 지 결정(콘솔, 파일, db)
			ConsoleAppender 	: 로그를 콘솔에 출력하기 위한 appender
			JDBCAppender		: 로그를 DB에 출력하기 위한 appender
			FileAppender		: 로그를 파일에 출력하기 위한 appender
			RollingFileAppender	: FileAppender보완, 일정 조건 후에 기존 파일을 백업 파일로 바꾸고 다시 처음부터 시작
			
		Layout : 로그를 어떤 형식으로 출력할 지 결정
			DateLayout, HTMLLayout, PatternLayout, SimpleLayout, XMLLayout
									(디버깅에 가장 적합)
			%p : debug, info, warn, error, fatal 등의 priority 출력
			%m : 로그 내용 출력
			%d : 로깅 이벤트가 발생한 시간 출력(프로그램의 실행 속도를 느리게 함)
			%t : 로그 이벤트가 발생된 스레드 이름 출력
			%% : %표시 출력
			%n : 플랫폼 종속적인 개행문자 출력
			%c : package(카테고리) 출력
			%c{n} : n(숫자)만큼의 package를 가장 하단부터 역으로 출력
					카테고리가 a.b.c처럼 되어 있다면 %c{2}는 b.c 출력
			%C : 호출자의 클래스 명 출력
				  클래스 구조가 org.apache.xyz.SomeClass처럼 되어 있다면 %C{2}는 xyz.SomeClass 출력
			%F : 로깅이 발생한 프로그램 파일 명 출력
			%l : 로깅이 발생한 caller의 정보 출력
			%L : 로깅이 발생한 caller의 라인 수 출력
			%M : 로깅이 발생한 method 이름 출력
			%r : 애플리케이션 시작 이후 로깅이 발생한 시점의 시간(milliseconds) 출력
			%x : 로깅이 발생한 스레드와 관련된 NDC 출력
			%X : 로깅이 발생한 스레드와 관련된 MDC 출력, %X{key}의 형태
			
	-->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
			<param name="ConversionPattern" value="%-5p: %c{1} - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<!-- 
		log4j의 로그레벨 파라미터
			DEBUG < INFO < WARN < ERROR < FATAL
			설정한 Level 속성 값 이상만이 화면에 보임
			(ex. info로 설정하면 debug로 설정한 log는 출력 안 됨)
		
			FATAL : 아주 심각한 에러 발생
			ERROR : 어떤 요청 처리 중 문제 발생
			WARN  : 프로그램 실행에는 문제 없지만 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지
			INFO  : 상태 변경과 같은 정보성 메세지
			DEBUG : 개발 시 디버그 용도로 사용하는 메세지
			TRACE : 디버그 레벨이 너무 광범위한 것을 해결하기 위해 좀 더 상세한 이벤트를 나타냄 
	-->
	<logger name="com.kh.emfly">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- 
	<logger name="com.kh.emfly.log.Log4jTest">
		주의 ! name의 속성 값은 오타가 있어도 에러가 발생하지 않기 때문에 잡기 힘드므로 조심하기
		<level value="debug" />
		<appender-ref ref="console" />
		additivity : 기본 값 true, 값을 false로 두면 rootLogger로 전달되지 않음, 대신에 appender-ref를 
			꼭 지정해주어야 함
	</logger>
	-->

	<logger name="com.kh.emfly.common.LoggerInterceptor">
		<level value="debug" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
</log4j:configuration>